From 7bd4c0b9d666b6ba516f016c62b3a983f60a37c3 Mon Sep 17 00:00:00 2001
From: James Page <james.page@ubuntu.com>
Date: Mon, 22 Jun 2015 17:08:58 +0100
Subject: [PATCH] Misc Python 3 compatibility fixes

Enablement of py34 target in tox, fixes for python3 syntax and
compatibility.

Change-Id: I2955a9654b3701af649bd1e515025ddf1676d6e1
---
 os_brick/exception.py                      | 2 +-
 os_brick/tests/initiator/test_connector.py | 9 ++++-----
 os_brick/tests/initiator/test_linuxfc.py   | 3 +--
 os_brick/tests/initiator/test_linuxscsi.py | 3 +--
 os_brick/tests/test_utils.py               | 7 +++++--
 tox.ini                                    | 2 +-
 6 files changed, 13 insertions(+), 13 deletions(-)

--- a/os_brick/exception.py
+++ b/os_brick/exception.py
@@ -53,7 +53,7 @@ class BrickException(Exception):
                 # log the issue and the kwargs
                 LOG.exception(_LE("Exception in string format operation. "
                                   "msg='%s'"), self.message)
-                for name, value in kwargs.iteritems():
+                for name, value in iter(kwargs.items()):
                     LOG.error(_LE("%(name)s: %(value)s"), {'name': name,
                                                            'value': value})
 
--- a/os_brick/tests/initiator/test_connector.py
+++ b/os_brick/tests/initiator/test_connector.py
@@ -13,7 +13,6 @@
 #    under the License.
 
 import os.path
-import string
 import tempfile
 import time
 
@@ -101,7 +100,7 @@ class ConnectorTestCase(base.TestCase):
         self.cmds = []
 
     def fake_execute(self, *cmd, **kwargs):
-        self.cmds.append(string.join(cmd))
+        self.cmds.append(' '.join(cmd))
         return "", None
 
     def test_connect_volume(self):
@@ -251,7 +250,7 @@ class ISCSIConnectorTestCase(ConnectorTe
         iqn = 'iqn.2010-10.org.openstack:%s' % name
         vol = {'id': 1, 'name': name}
         connection_info = self.iscsi_connection(vol, location, iqn)
-        for key, value in extra_props.iteritems():
+        for key, value in iter(extra_props.items()):
             connection_info['data'][key] = value
         device = self.connector.connect_volume(connection_info['data'])
         dev_str = '/dev/disk/by-path/ip-%s-iscsi-%s-lun-1' % (location, iqn)
@@ -1043,7 +1042,7 @@ class HuaweiStorHyperConnectorTestCase(C
 
     def fake_execute(self, *cmd, **kwargs):
         method = cmd[2]
-        self.cmds.append(string.join(cmd))
+        self.cmds.append(' '.join(cmd))
         if 'attach' == method:
             HuaweiStorHyperConnectorTestCase.attached = True
             return 'ret_code=0', None
@@ -1058,7 +1057,7 @@ class HuaweiStorHyperConnectorTestCase(C
 
     def fake_execute_fail(self, *cmd, **kwargs):
         method = cmd[2]
-        self.cmds.append(string.join(cmd))
+        self.cmds.append(' '.join(cmd))
         if 'attach' == method:
             HuaweiStorHyperConnectorTestCase.attached = False
             return 'ret_code=330151401', None
--- a/os_brick/tests/initiator/test_linuxfc.py
+++ b/os_brick/tests/initiator/test_linuxfc.py
@@ -13,7 +13,6 @@
 #    under the License.
 
 import os.path
-import string
 
 import mock
 from oslo_log import log as logging
@@ -35,7 +34,7 @@ class LinuxFCTestCase(base.TestCase):
         self.lfc = linuxfc.LinuxFibreChannel(None, execute=self.fake_execute)
 
     def fake_execute(self, *cmd, **kwargs):
-        self.cmds.append(string.join(cmd))
+        self.cmds.append(' '.join(cmd))
         return "", None
 
     def test_rescan_hosts(self):
--- a/os_brick/tests/initiator/test_linuxscsi.py
+++ b/os_brick/tests/initiator/test_linuxscsi.py
@@ -14,7 +14,6 @@
 
 import os
 import os.path
-import string
 
 import mock
 from oslo_log import log as logging
@@ -36,7 +35,7 @@ class LinuxSCSITestCase(base.TestCase):
         self.linuxscsi = linuxscsi.LinuxSCSI(None, execute=self.fake_execute)
 
     def fake_execute(self, *cmd, **kwargs):
-        self.cmds.append(string.join(cmd))
+        self.cmds.append(' '.join(cmd))
         return "", None
 
     def test_echo_scsi_command(self):
--- a/os_brick/tests/test_utils.py
+++ b/os_brick/tests/test_utils.py
@@ -21,6 +21,8 @@ from os_brick import exception
 from os_brick.tests import base
 from os_brick import utils
 
+from six.moves import range
+
 
 LOG = logging.getLogger(__name__)
 
@@ -93,12 +95,13 @@ class TestRetryDecorator(base.TestCase):
 
             expected_sleep_arg = []
 
-            for i in xrange(retries):
+            for i in range(retries):
                 if i > 0:
                     interval *= backoff_rate
                     expected_sleep_arg.append(float(interval))
 
-            mock_sleep.assert_has_calls(map(mock.call, expected_sleep_arg))
+            mock_sleep.assert_has_calls(
+                list(map(mock.call, expected_sleep_arg)))
 
     def test_wrong_exception_no_retry(self):
 
--- a/tox.ini
+++ b/tox.ini
@@ -1,6 +1,6 @@
 [tox]
 minversion = 1.6
-envlist = py27,pep8
+envlist = py27,py34,pep8
 skipsdist = True
 
 [testenv]
